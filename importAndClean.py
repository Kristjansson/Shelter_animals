import numpy as np
import pandas as pd
from collections import Counter
from matplotlib import pyplot as plt
import datetime
import csv

def importData():
    print("Data Imported")
    return pd.read_csv("""train.csv""")
def makeHistogram(data):
    """Takes a Counter and produces a histogram"""
    plt.bar(range(len(data.keys())), data.values())
    plt.xticks([x + 0.25 for x in range(len(data.keys()))], data.keys())
    plt.show()

# TRIAL_VAL = 100
PRUNE = False

train = importData()
data = [set(train[c]) for c in train.columns]
counts = {c: Counter(train[c]) for c in train.columns}

# Create initial dictionary dataset
fields = train.columns
dataset = [{field: train[field][index] for field in train.columns} for index in range(len(train["AnimalID"]))]
# dataset = [{field: train[field][index] for field in train.columns} for index in range(0, TRIAL_VAL)]

# Refine Dataset
for d in dataset:
    # Split SexuponOutcome col into gender (male/female )and fixed (yes/no)
    val1 = d["SexuponOutcome"].lower() if isinstance(d["SexuponOutcome"], basestring) else 'unknown'
    if (('spayed' in val1) or ('intact' in val1) or ('neutered' in val1)) and (('male' in val1) or ('female' in val1)):
        fixed, gender = val1.split(' ')
        d['fixed'] = 0.0 if fixed == 'intact' else 1.0
        d['gender'] = 1.0 if gender == 'female' else 0.0
    else:
        d['fixed'] = 0.5  # Assigned to the middle to capture uncertainty
        d['gender'] = 0.5

    # convert all ages to weeks
    val2 = d['AgeuponOutcome'].lower() if isinstance(d['AgeuponOutcome'], basestring) else ""
    if ('year' in val2) or ('month' in val2) or ('week' in val2):
        age, unit = val2.split(" ")
        age = float(age)
        if 'month' in unit:
            d['Age'] = int(round(4.3 * age))
        elif 'year' in unit:
            d['Age'] = int(round(52.1 * age))
        else: # Must be in weeks
            d['Age'] = age
    else:
        d['Age'] = float('nan')

    # Merge OutcomeType and OutcomeSubtype into a single column
    val3, val4 = d['OutcomeType'], d['OutcomeSubtype']
    d['Outcome'] = val3 + '_' + val4 if isinstance(val3, basestring) and isinstance(val4, basestring) else val3

    # Break DateTime into Month, Day (of month), and hour
    # I am assuming this is DateTime of outcome, otherwise it shouldn't have much correlation
    # I think these are autogenerated, so I will be less careful about handling bad data
    val5, val6 = d['DateTime'].split(' ')
    year , month, day = val5.split('-')
    hour, _, _ = val6.split(':')
    d['MonthOfOutcome'] = int(month)
    d['DayOfOutcome'] = int(day)
    d['HourOfOutcome'] = int(hour)
    d['DayOfWeek'] = datetime.datetime(int(year), int(month), int(day)).weekday()

    # Cast names to a integer based on popularity
    d['Name'] = counts['Name'][d['Name']] if isinstance(d['Name'], basestring) else 0

    # Create a mix column
    d['Mix'] = 1 if (' mix' in d['Breed']) else 0

    # Cast breeds to a integer based on popularity
    d['Breed'] = counts['Breed'][d['Breed']] if isinstance(d['Breed'], basestring) else 0

    d['AnimalType'] = 1 if d['AnimalType'].lower() == 'dog' else 0

output_cols = ['AnimalID', 'Name', 'AnimalType', 'gender', 'fixed', 'Age', 'Color', 'Breed', 'MonthOfOutcome',
               'DayOfOutcome', 'HourOfOutcome','DayOfWeek', 'Outcome']
fileName = 'trainFIXED_PRUNED.csv' if PRUNE else 'trainFIXED.csv'
with open(fileName, 'wb') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',',
                            quotechar='|', quoting=csv.QUOTE_MINIMAL)
    csvwriter.writerow(output_cols)
    for d in dataset:
        if not (PRUNE and ('nan' in d.values() or float('nan') in d.values())):
            csvwriter.writerow([d[col] for col in output_cols])
